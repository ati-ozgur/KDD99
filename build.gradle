buildscript {
    repositories {
        maven  {
            url "http://repo1.maven.org/maven2"
        }
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}
import de.undercouch.gradle.tasks.download.Download

apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'download-task'
apply plugin: 'groovy'
apply plugin: 'java'

version = '0.0.1'

jar {
    manifest.attributes(
            'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')
    )
}


 ext {
    GROUP_NAME_KDD_DATA_PREPERATION = "KDD99 Dataset Preperation"
    GROUP_NAME_KDD_ML_TRAIN_TEST = "KDD99 Machine Learning Training and Testing"
    GROUP_NAME_TEST = "Verification"

    urlKdd99WebSite = 'http://kdd.ics.uci.edu/databases/kddcup99/'
    mainPackageName = "testBench.ids.kdd99"
    //mainClassName = "weka.core.SystemInfo"
    //mainClassName = mainPackageName + ".SQLiteJDBC"
    mainClassName = mainPackageName + '.JdbcExample'


    DATABASE_NAME = "test1.sqlite"

    kddDataSetFiles = [
    'kddcup.names',
    'kddcup.data.gz',
    'kddcup.data_10_percent.gz',
    'kddcup.newtestdata_10_percent_unlabeled.gz',
    'kddcup.testdata.unlabeled.gz',
    'kddcup.testdata.unlabeled_10_percent.gz',
    'corrected.gz',
    'training_attack_types',
    'typo-correction.txt',
    'task.html'

    ]
  }










repositories {
      maven  {
          url "http://repo1.maven.org/maven2"
      }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'nz.ac.waikato.cms.weka:weka-dev:3.7.12'
    compile 'org.xerial:sqlite-jdbc:3.8.7'
    //compile 'org.xerial:sqlite-jdbc:3.7.15-M1'
    compile 'nz.ac.waikato.cms.moa:moa:2014.04'



}




clean{
    delete "Datasets"
}

/*
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
  _____            _                          _       _____                                                _     _                 
 |  __ \          | |                        | |     |  __ \                                              | |   (_)                
 | |  | |   __ _  | |_    __ _   ___    ___  | |_    | |__) |  _ __    ___   _ __     ___   _ __    __ _  | |_   _    ___    _ __  
 | |  | |  / _` | | __|  / _` | / __|  / _ \ | __|   |  ___/  | '__|  / _ \ | '_ \   / _ \ | '__|  / _` | | __| | |  / _ \  | '_ \ 
 | |__| | | (_| | | |_  | (_| | \__ \ |  __/ | |_    | |      | |    |  __/ | |_) | |  __/ | |    | (_| | | |_  | | | (_) | | | | |
 |_____/   \__,_|  \__|  \__,_| |___/  \___|  \__|   |_|      |_|     \___| | .__/   \___| |_|     \__,_|  \__| |_|  \___/  |_| |_|
                                                                            | |                                                    
                                                                            |_|                                                    
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
*/



task downloadKddDatasetFiles {
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Download KDD99 files from internet'

  inputs.property("fileNames",kddDataSetFiles)

  kddDataSetFiles.each{ filename->
       String fullFileName='Datasets/' + filename
       outputs.files fullFileName

    }

  doLast{
    kddDataSetFiles.each{ filename->
         String fullUrl=urlKdd99WebSite + filename
         String fullFileName='Datasets/' + filename
         println fullUrl
         println fullFileName
         download {
            src fullUrl
            dest fullFileName
        }

    }
  }
}

def kddZipFiles()
{
  return kddDataSetFiles.findAll{filename-> filename.endsWith("gz")}
}

task unzipSqlite3(type: Copy) {
  def zipFile = file('tools/sqlite-shell-win32-x86-3080703.zip')
  def outputDir = file("tools/")
  from zipTree(zipFile)
  into outputDir
}

task unzipKddDatasetFiles{

  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Unzip .gz KDD99 files which are downloaded from internet, this tasks should run after downloadKddDatasetFiles'

  kddZipFiles().each{filename->
    String fullFileName='Datasets/' + filename
    String fullFileNameWithoutGz = fullFileName.replace(".gz","")
    outputs.files fullFileName
  }



  doLast{
    kddZipFiles().each{ filename->
        String fullFileName='Datasets/' + filename
        String fullFileNameWithoutGz = fullFileName.replace(".gz","")
        ant.gunzip(dest:fullFileNameWithoutGz,src:fullFileName)

    }

  }

}


def createChecksumForKddDatasetFiles() {
    println "createChecksumForKddDatasetFiles"
    kddDataSetFiles.each{ filename->
        println filename
        String fullFileName='Datasets/' + filename
        ant.checksum(file:fullFileName,todir:'Datasets')

    }
}



task execInstallWekaPackages(type:JavaExec) {
  main = "weka.core.WekaPackageManager"
  classpath = sourceSets.main.runtimeClasspath
  //minHeapSize = "5g"
  //maxHeapSize = "20g"
  //args = ["-list-packages","all"]
  args = ["-install-package","RBFNetwork"]
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Install RBFNetwork using Weka Package Manager '
}



task execSQLCreateTable(type:JavaExec) {
   main = mainPackageName + ".TableCreation"
   classpath = sourceSets.main.runtimeClasspath
}


ext {
   IMPORT_FILE_NAME = "import.sql";
   IMPORT_FILE_NAME_FULL = "Datasets/" + IMPORT_FILE_NAME
   IMPORT_BASH_FILE_NAME = "import.bash"
   IMPORT_BASH_FILE_NAME_FULL = "Datasets/" + IMPORT_BASH_FILE_NAME;

  CMD_ImportKddTrainData = """.separator ","
.import kddcup.data KDD_TRAIN_DATA
.import corrected TEST_CORRECTED
"""

  CMD_Exec_sqlite3_import = "sqlite3 ${DATABASE_NAME} < ${IMPORT_FILE_NAME}"

  FOLDER_DATASETS = file("Datasets")
  FOLDER_DATASETS_FULLPATH = FOLDER_DATASETS.getAbsolutePath()

  output_SQLITE_IMPORT_FILE = file(IMPORT_FILE_NAME_FULL)
  output_SQLITE_IMPORT_FILE_BASH_COMMAND = file(IMPORT_BASH_FILE_NAME_FULL)

}



task generateImportScripts << {
  FOLDER_DATASETS.mkdirs()
  output_SQLITE_IMPORT_FILE.write CMD_ImportKddTrainData
  output_SQLITE_IMPORT_FILE_BASH_COMMAND.write CMD_Exec_sqlite3_import


  ant.chmod(dir:FOLDER_DATASETS_FULLPATH, perm:'+x', includes:"*.bash")

}





def isWindows()
{
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
      //println "it's Windows" + System.properties['os.name']
      return true;
   } else {
      //println "it's not Windows, it is " + System.properties['os.name']
      return false;
   }
}


task tableImportKddTrainDataFromCommandLine(type:Exec) {
  //store the output instead of printing to the console:

  workingDir FOLDER_DATASETS_FULLPATH

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
  return standardOutput.toString()
  }

  if (isWindows())
  {
    commandLine 'cmd', '/c', CMD_Exec_sqlite3_import
  }
  else
  {
    commandLine "./" + IMPORT_BASH_FILE_NAME
  }

 }

tableImportKddTrainDataFromCommandLine.dependsOn execSQLCreateTable
tableImportKddTrainDataFromCommandLine.dependsOn generateImportScripts
tableImportKddTrainDataFromCommandLine.dependsOn unzipSqlite3




configure(tableImportKddTrainDataFromCommandLine) {   
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'import KDD99 files to sqlite database'
}


task execSQLSchemaChangeAfterImport(type:JavaExec) {
  main = mainPackageName + ".TableSchemaUpdatesAfterImport"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'after import KDD99 files to sqlite database, execute ALTER TABLE sql scripts'

}




task execCreateArffFileFromDatabase(type:JavaExec) {
  main = "testBench.ids.kdd99.CreateArffFileFromDatabaseGRunner"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "20g"
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'This is Arff files creation step. '
}






/*
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
  __  __                  _       _                    _                                      _                 
 |  \/  |                | |     (_)                  | |                                    (_)                
 | \  / |   __ _    ___  | |__    _   _ __     ___    | |        ___    __ _   _ __   _ __    _   _ __     __ _ 
 | |\/| |  / _` |  / __| | '_ \  | | | '_ \   / _ \   | |       / _ \  / _` | | '__| | '_ \  | | | '_ \   / _` |
 | |  | | | (_| | | (__  | | | | | | | | | | |  __/   | |____  |  __/ | (_| | | |    | | | | | | | | | | | (_| |
 |_|  |_|  \__,_|  \___| |_| |_| |_| |_| |_|  \___|   |______|  \___|  \__,_| |_|    |_| |_| |_| |_| |_|  \__, |
                                                                                                           __/ |
                                                                                                          |___/ 
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
*/

task trainOneModelInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.TrainModelInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"

  
  if (project.hasProperty('classifierName') )
  {
    //print classifierName
    def argList = ["classifierName", classifierName ]

    if (project.hasProperty('classifierOptions') )
    {
       argList = argList + ["classifierOptions", classifierOptions]
    }

    args = argList
  }
  else if (project.hasProperty("classifierFullString"))
  {
    print classifierFullString
    def argList = ["classifierFullString",classifierFullString]
    args = argList

  }


  else
  {
     print "NO classifierName specified"
  }

  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Using Training dataset, named classifiers are trained. 
  Usage Example1:  gradlew trainOneModelInTrainingDataSet -PclassifierName=J48 
  Usage Example1:  gradlew trainOneModelInTrainingDataSet -PclassifierName=NaiveBayes -PclassifierOptions='-K'
  Usage Example1:  gradlew trainOneModelInTrainingDataSet -PclassifierFullString='weka.classifiers.rules.OneR -B 20'
  """
}

task trainAllModelInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.TrainModelsUsingDifferentClassifiersInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = 'Using Training dataset different classifiers are trained. '
}


task testOneModelInTrainingDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model"]
    args = argList
  }

  main = "testBench.ids.kdd99.TestOneModelInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained model on KDD99 full training data set
  Usage Example1:  ./gradlew testOneModelInTrainingDataSet -PmodelFileName='weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model'
  """

  


}



task testAllModelsInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.TestAllModelsInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained models on KDD99 full training data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}

task testAllModelsInTestDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.TestAllModelsInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained models on KDD99 full test data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}



task testOneModelInTestDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
    //print modelFileName

  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model"]
    args = argList

  }

  main = "testBench.ids.kdd99.TestOneModelInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained model on KDD99 full test data set
  Usage Example1:  ./gradlew execTestOneModelInTestDataSet -PmodelFileName='weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model'
  """

  


}


task listTrainedModelFiles() << {
  FileTree tree = fileTree(dir: 'Datasets/SavedModels').include('**/*.model')
  tree.each {File file ->
      println file.name
  }
}

listTrainedModelFiles.group = GROUP_NAME_KDD_ML_TRAIN_TEST
listTrainedModelFiles.description = 'List trained model files, which can be used in other tasks such as execTestOneModelInTrainingDataSet'


/*
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
 \ \    / /               (_)  / _| (_)                | |   (_)                
  \ \  / /    ___   _ __   _  | |_   _    ___    __ _  | |_   _    ___    _ __  
   \ \/ /    / _ \ | '__| | | |  _| | |  / __|  / _` | | __| | |  / _ \  | '_ \ 
    \  /    |  __/ | |    | | | |   | | | (__  | (_| | | |_  | | | (_) | | | | |
     \/      \___| |_|    |_| |_|   |_|  \___|  \__,_|  \__| |_|  \___/  |_| |_|
                                                                                
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
*/
                                                                                
task execProgram(type:JavaExec) {
  main = "testBench.ids.kdd99.ProgramGroovy"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_TEST
  description = 'Test Program class'
}

task execMoaExample(type:JavaExec) {
  main = "testBench.ids.kdd99.MoaExample"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_TEST
  description = 'Test Program class'
}


// Examples 
// gradle -PmainClass=Program execute
// gradle -PmainClass=weka.core.SystemInfo execute
// Bu hali ile aşağıdaki hatayı  veriyor.
// Could not find property 'mainClass' on task ':execute'.
// Buna başka bir çözüm bulacağım
task execSQLiteConnectionControl(type:JavaExec) {
   main = mainPackageName + ".SQLiteJDBC"
   classpath = sourceSets.main.runtimeClasspath
   group = GROUP_NAME_TEST
   description = "it verifies sqlite connection is correct"
}

