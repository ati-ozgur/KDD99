buildscript {
    repositories {
        maven  {
            url "http://repo1.maven.org/maven2"
        }
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}
import de.undercouch.gradle.tasks.download.Download

apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'download-task'
apply plugin: 'groovy'
apply plugin: 'java'

version = '0.0.1'



 ext {
    GROUP_NAME_KDD_DATA_PREPERATION = "KDD99 Dataset Preperation"
    GROUP_NAME_KDD_ML_TRAIN_TEST = "KDD99 Machine Learning Training and Testing"

    urlKdd99WebSite = 'http://kdd.ics.uci.edu/databases/kddcup99/'


    DATABASE_NAME = "test1.sqlite"

    kddDataSetFiles = [
    'kddcup.names',
    'kddcup.data.gz',
    'kddcup.data_10_percent.gz',
    'kddcup.newtestdata_10_percent_unlabeled.gz',
    'kddcup.testdata.unlabeled.gz',
    'kddcup.testdata.unlabeled_10_percent.gz',
    'corrected.gz',
    'training_attack_types',
    'typo-correction.txt',
    'task.html'

    ]
  }










repositories {
      maven  {
          url "http://repo1.maven.org/maven2"
      }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'nz.ac.waikato.cms.weka:weka-dev:3.7.12'
    compile 'org.xerial:sqlite-jdbc:3.8.7'
    //compile 'org.xerial:sqlite-jdbc:3.7.15-M1'
    compile 'nz.ac.waikato.cms.moa:moa:2014.04'



}




clean{
    delete "Datasets"
}






apply from: 'buildScripts/build.datasetPreperation.gradle'
apply from: 'buildScripts/build.mlweka.gradle'
apply from: 'buildScripts/build.mlmoa.gradle'

apply from: 'buildScripts/build.verification.gradle'

apply from: 'buildScripts/build.examples.gradle'

apply from: 'buildScripts/build.report.gradle'

apply from: 'buildScripts/build.misc.gradle'

def isWindows()
{
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
      //println "it's Windows" + System.properties['os.name']
      return true;
   } else {
      //println "it's not Windows, it is " + System.properties['os.name']
      return false;
   }
}



task showMeCache << {
  configurations.compile.each { println it }
}



task listTrainedModelFiles() << {
  FileTree tree = fileTree(dir: 'Datasets/SavedModels').include('**/*.weka')
  tree.each {File file ->
      println file.name
  }
  tree = fileTree(dir: 'Datasets/SavedModels').include('**/*.moa')
  tree.each {File file ->
      println file.name
  }
}

listTrainedModelFiles.group = GROUP_NAME_KDD_ML_TRAIN_TEST
listTrainedModelFiles.description = """List trained model files, which can be used in other tasks such as 
                        testOneModelUsingWekaInTrainingDataSet or testOneModelUsingMoaInTrainingDataSet"""
