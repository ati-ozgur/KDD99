buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}
import de.undercouch.gradle.tasks.download.Download


apply plugin: 'application'
apply plugin: 'download-task'
apply plugin: 'groovy'
apply plugin: 'java'

version = '0.0.1'



 ext {
    urlKdd99WebSite = 'http://kdd.ics.uci.edu/databases/kddcup99/'
    mainPackageName = "tr.edu.baskent.fbe.Kdd99"
    //mainClassName = "weka.core.SystemInfo"
    //mainClassName = mainPackageName + ".SQLiteJDBC"
    mainClassName = mainPackageName + '.JdbcExample'


    DATABASE_NAME = "test1.sqlite"

    kddDataSetFiles = [
    'kddcup.names',
    'kddcup.data.gz',
    'kddcup.data_10_percent.gz',
    'kddcup.newtestdata_10_percent_unlabeled.gz',
    'kddcup.testdata.unlabeled.gz',
    'kddcup.testdata.unlabeled_10_percent.gz',
    'corrected.gz',
    'training_attack_types',
    'typo-correction.txt',
    'task.html'

    ]
  }










repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'nz.ac.waikato.cms.weka:weka-dev:3.7.11'
    compile 'org.xerial:sqlite-jdbc:3.7.15-M1'

	runtime 'nz.ac.waikato.cms.weka:weka-dev:3.7.11'



}

defaultTasks 'clean','generate','createChecksumForKddDatasetFiles','tableImportKddTrainDataFromCommandLine'

clean << {
    delete "Datasets"
    createDatasetsFolder()
}





task downloadKddDatasetFiles << {
    

    kddDataSetFiles.each{ filename->
         String fullUrl=urlKdd99WebSite + filename
         String fullFileName='Datasets/' + filename
         println fullUrl
         println fullFileName
         download {
            src fullUrl
            dest fullFileName
        }

    }
}


task unzipKddDatasetFiles << {
    kddDataSetFiles.each{ filename->
        if (filename.endsWith("gz"))
        {
            String fullFileName='Datasets/' + filename
            String fullFileNameWithoutGz = fullFileName.replace("gz","")
            ant.gunzip(dest:fullFileNameWithoutGz,src:fullFileName)
        }

    }

}
unzipKddDatasetFiles.dependsOn downloadKddDatasetFiles

task createChecksumForKddDatasetFiles << {
    println "createChecksumForKddDatasetFiles"
    kddDataSetFiles.each{ filename->
        println filename
        String fullFileName='Datasets/' + filename
        ant.checksum(file:fullFileName,todir:'Datasets')

    }
}

createChecksumForKddDatasetFiles.dependsOn unzipKddDatasetFiles


// Examples 
// gradle -PmainClass=Program execute
// gradle -PmainClass=weka.core.SystemInfo execute
// Bu hali ile aşağıdaki hatayı  veriyor.
// Could not find property 'mainClass' on task ':execute'.
// Buna başka bir çözüm bulacağım
task execSQLiteConnectionControl(type:JavaExec) {
   main = mainPackageName + ".SQLiteJDBC"
   classpath = sourceSets.main.runtimeClasspath
}

task execSQLCreateTable(type:JavaExec) {
   main = mainPackageName + ".TableCreation"
   classpath = sourceSets.main.runtimeClasspath
}

task tableImportKddTrainDataFromSql(type:JavaExec) {
   main = mainPackageName + ".TableImportKddTrainData"
   classpath = sourceSets.main.runtimeClasspath
}
tableImportKddTrainDataFromSql.dependsOn execSQLCreateTable

ext {
   IMPORT_FILE_NAME = "import.sql";
   IMPORT_FILE_NAME_FULL = "Datasets/" + IMPORT_FILE_NAME
   IMPORT_BASH_FILE_NAME = "import.bash"
   IMPORT_BASH_FILE_NAME_FULL = "Datasets/" + IMPORT_BASH_FILE_NAME;

  CMD_ImportKddTrainData = """.separator ","
.import kddcup.data KDD_TRAIN_DATA
"""

  CMD_Exec_sqlite3_import = "sqlite3 ${DATABASE_NAME} < ${IMPORT_FILE_NAME}"

  outputDir = file("$buildDir/Datasets")

  outputFile = file(IMPORT_FILE_NAME_FULL)

}



task generate << {
  outputDir.mkdirs()
  outputFile.write CMD_ImportKddTrainData
}



def createImportBashFile()
{
    def f = file(IMPORT_BASH_FILE_NAME_FULL)
    //println f.getAbsolutePath()
    def w = f.newWriter() 

    w << CMD_Exec_sqlite3_import
    w.close()


}




def isWindows()
{
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
      //println "it's Windows" + System.properties['os.name']
      return true;
   } else {
      //println "it's not Windows, it is " + System.properties['os.name']
      return false;
   }
}


String findCommandLine()
{
  //createImportFile()
  if (isWindows())
  {
    commandLine 'cmd', '/c', CMD_Exec_sqlite3_import
  }
  else
  {
    //createImportBashFile()
    //ant.chmod(dir:workingDir, perm:'+x', includes:"*.bash")
    //commandLine "./" + IMPORT_BASH_FILE_NAME
  }
  
}


task tableImportKddTrainDataFromCommandLine(type:Exec) {

  workingDir file("Datasets").getAbsolutePath()


  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  ext.output = {
  return standardOutput.toString()
  }
}


  tableImportKddTrainDataFromCommandLine << {
    createImportFile()

    if (!isWindows())
    {
      commandLine 'cmd', '/c', CMD_Exec_sqlite3_import
    }
    else
    {
      createImportBashFile()
      ant.chmod(dir:workingDir, perm:'+x', includes:"*.bash")
    }
  }



tableImportKddTrainDataFromCommandLine.dependsOn execSQLCreateTable




jar {
    manifest.attributes(
            'Class-Path': configurations.runtime.files.collect { it.name }.join(' ')
    )
}
