/*
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
  __  __                  _       _                    _                                      _                 
 |  \/  |                | |     (_)                  | |                                    (_)                
 | \  / |   __ _    ___  | |__    _   _ __     ___    | |        ___    __ _   _ __   _ __    _   _ __     __ _ 
 | |\/| |  / _` |  / __| | '_ \  | | | '_ \   / _ \   | |       / _ \  / _` | | '__| | '_ \  | | | '_ \   / _` |
 | |  | | | (_| | | (__  | | | | | | | | | | |  __/   | |____  |  __/ | (_| | | |    | | | | | | | | | | | (_| |
 |_|  |_|  \__,_|  \___| |_| |_| |_| |_| |_|  \___|   |______|  \___|  \__,_| |_|    |_| |_| |_| |_| |_|  \__, |
                                                                                                           __/ |
                                                                                                          |___/ 
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
*/

task trainOneModelUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TrainOneModelInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"

  
  if (project.hasProperty('classifierName') )
  {
    //print classifierName
    def argList = ["classifierName", classifierName ]

    if (project.hasProperty('classifierOptions') )
    {
       argList = argList + ["classifierOptions", classifierOptions]
    }

    args = argList
  }
  else if (project.hasProperty("classifierFullString"))
  {
    print classifierFullString
    def argList = ["classifierFullString",classifierFullString]
    args = argList

  }

  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Using Training dataset, named classifiers are trained. 
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierName=J48 
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierName=NaiveBayes -PclassifierOptions='-K'
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierFullString='weka.classifiers.rules.OneR -B 20'
  """
}

task trainAllModelsUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TrainAllModelsInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = 'Using Training dataset different classifiers are trained. '
}


task testOneModelUsingWekaInTrainingDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model"]
    args = argList
  }

  main = "testBench.ids.kdd99.weka.TestOneModelInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained model on KDD99 full training data set
  Usage Example1:  ./gradlew testOneModelUsingWekaInTrainingDataSet -PmodelFileName='weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model'
  """

  


}



task testAllModelsUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TestAllModelsInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained models on KDD99 full training data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}

task testAllModelsUsingWekaInTestDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TestAllModelsInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained models on KDD99 full test data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}



task testOneModelUsingWekaInTestDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
    //print modelFileName

  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model"]
    args = argList

  }

  main = "testBench.ids.kdd99.weka.TestOneModelInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST
  description = """Test already trained model on KDD99 full test data set
  Usage Example1:  ./gradlew execTestOneModelInTestDataSet -PmodelFileName='weka.classifiers.rules.OneRcombined_createFullKdd99TrainingDatasetForBinary.model'
  """

  


}


task listTrainedModelFiles() << {
  FileTree tree = fileTree(dir: 'Datasets/SavedModels').include('**/*.model')
  tree.each {File file ->
      println file.name
  }
}

listTrainedModelFiles.group = GROUP_NAME_KDD_ML_TRAIN_TEST
listTrainedModelFiles.description = 'List trained model files, which can be used in other tasks such as execTestOneModelInTrainingDataSet'
