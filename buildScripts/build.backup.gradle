// TODO this is very confusing refactor it later.

ext {
  GROUP_NAME_BACKUP = "Backup"

   EXPORT_RESULTS_FILE_NAME = "exportResults.sql";
   EXPORT_RESULTS_FILE_NAME_FULL = "Datasets/" + EXPORT_RESULTS_FILE_NAME
   EXPORT_RESULTS_BASH_FILE_NAME = "exportResults.bash"
   EXPORT_RESULTS_BASH_FILE_NAME_FULL = "Datasets/" + EXPORT_RESULTS_BASH_FILE_NAME;
   EXPORT_RESULTS_SQL_FINAL_FOLDER = "backup/tableExports";


  
CMD_ExportResultsSQLScript = """
.mode insert ML_TRAIN_RESULTS
.out "../$EXPORT_RESULTS_SQL_FINAL_FOLDER/ML_TRAIN_RESULTS%s.sql"
select * from ML_TRAIN_RESULTS;
.mode insert ML_TEST_RESULTS
.out "../$EXPORT_RESULTS_SQL_FINAL_FOLDER/ML_TEST_RESULTS%s.sql" 
select * from ML_TEST_RESULTS;
"""


  output_SQLITE_EXPORT_RESULTS_FILE = file(EXPORT_RESULTS_FILE_NAME_FULL)
  output_SQLITE_EXPORT_RESULTS_FILE_BASH_COMMAND = file(EXPORT_RESULTS_BASH_FILE_NAME_FULL)

  CMD_Exec_sqlite3_exportResults = "sqlite3 ${DATABASE_NAME} < ${EXPORT_RESULTS_FILE_NAME}"  
}




String getTodayAsFormatted() {
    String STR_DATE_FORMAT = "_yyyy-MM-dd";
    java.util.Calendar c = java.util.Calendar.getInstance();
    java.util.Date d = c.getTime();
    
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(STR_DATE_FORMAT);
    return sdf.format(d);

}



def generateExportResultsScripts()
{
  def dir = new File(EXPORT_RESULTS_SQL_FINAL_FOLDER)
  if(!dir.exists())
  {
    dir.mkdirs();
  }


  String script = String.format(CMD_ExportResultsSQLScript,getTodayAsFormatted(),getTodayAsFormatted())
  output_SQLITE_EXPORT_RESULTS_FILE.write script
  output_SQLITE_EXPORT_RESULTS_FILE_BASH_COMMAND.write CMD_Exec_sqlite3_exportResults


  ant.chmod(dir:FOLDER_DATASETS_FULLPATH, perm:'+x', includes:"*.bash")

}


task backupResultTablesToSqlFile(type:Exec)  {
  generateExportResultsScripts();

  workingDir FOLDER_DATASETS_FULLPATH

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }

  if (isWindows())
  {
    commandLine 'cmd', '/c', CMD_Exec_sqlite3_exportResults
  }
  else
  {
    commandLine "./" + EXPORT_RESULTS_BASH_FILE_NAME
  }

 }


backupResultTablesToSqlFile.group = GROUP_NAME_BACKUP
backupResultTablesToSqlFile.description = """ This task take a backup of following Results Tables:
                                ML_TRAIN_RESULTS
                                ML_TEST_RESULTS"""



task backupModelFiles(type:Zip)  {
 outputs.upToDateWhen { false }
 
 String strArchiveName = 'savedModelFiles' + getTodayAsFormatted() + '.zip'

 from ('Datasets/SavedModels')

 archiveName strArchiveName
 include '*'
 //into 'resources' // note that this specifies path *in* the archive
 destinationDir file("backup")  // directory that you want your archive to be placed in
}

backupModelFiles.group = GROUP_NAME_BACKUP
backupModelFiles.description = "This task take a backup of trained model files"


backupModelFiles.mustRunAfter backupResultTablesToSqlFile

task backupFull << {

}

backupFull.description = "This task runs other backup tasks"

backupFull.group = GROUP_NAME_BACKUP

backupFull.dependsOn   'backupResultTablesToSqlFile','backupModelFiles'

