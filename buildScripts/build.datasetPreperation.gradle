
task downloadKddDatasetFiles {
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Download KDD99 files from internet'

  inputs.property("fileNames",kddDataSetFiles)

  kddDataSetFiles.each{ filename->
       String fullFileName='Datasets/' + filename
       outputs.files fullFileName

    }

  doLast{
    kddDataSetFiles.each{ filename->
         String fullUrl=urlKdd99WebSite + filename
         String fullFileName='Datasets/' + filename
         println fullUrl
         println fullFileName
         download {
            src fullUrl
            dest fullFileName
        }

    }
  }
}

def kddZipFiles()
{
  return kddDataSetFiles.findAll{filename-> filename.endsWith("gz")}
}

task unzipSqlite3(type: Copy) {
  def zipFile = file('tools/sqlite-shell-win32-x86-3080703.zip')
  def outputDir = file("tools/")
  from zipTree(zipFile)
  into outputDir
}

task unzipKddDatasetFiles{

  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Unzip .gz KDD99 files which are downloaded from internet, this tasks should run after downloadKddDatasetFiles'

  kddZipFiles().each{filename->
    String fullFileName='Datasets/' + filename
    String fullFileNameWithoutGz = fullFileName.replace(".gz","")
    outputs.files fullFileName
  }



  doLast{
    kddZipFiles().each{ filename->
        String fullFileName='Datasets/' + filename
        String fullFileNameWithoutGz = fullFileName.replace(".gz","")
        ant.gunzip(dest:fullFileNameWithoutGz,src:fullFileName)

    }

  }

}


def createChecksumForKddDatasetFiles() {
    println "createChecksumForKddDatasetFiles"
    kddDataSetFiles.each{ filename->
        println filename
        String fullFileName='Datasets/' + filename
        ant.checksum(file:fullFileName,todir:'Datasets')

    }
}



task execInstallWekaPackages(type:JavaExec) {
  main = "weka.core.WekaPackageManager"
  classpath = sourceSets.main.runtimeClasspath
  //minHeapSize = "5g"
  //maxHeapSize = "20g"
  //args = ["-list-packages","all"]
  // TODO: Try later, it does not install package.
  def propertiesMap = [WEKA_HOME: "build/wekaFiles"]
  //systemProperties propertiesMap


  args = ["-install-package","RBFNetwork"]
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'Install RBFNetwork using Weka Package Manager '
}



task execSQLCreateTables(type:JavaExec) {
   main = mainPackageName + ".etl.CreateTables"
   classpath = sourceSets.main.runtimeClasspath
}

task execSQLCreateViews(type:JavaExec) {
   main = mainPackageName + ".etl.CreateViews"
   classpath = sourceSets.main.runtimeClasspath
}

task execSQLInsertLookupTables(type:JavaExec) {
   main = mainPackageName + ".etl.InsertLookupTables"
   classpath = sourceSets.main.runtimeClasspath
}


ext {
   IMPORT_FILE_NAME = "import.sql";
   IMPORT_FILE_NAME_FULL = "Datasets/" + IMPORT_FILE_NAME
   IMPORT_BASH_FILE_NAME = "import.bash"
   IMPORT_BASH_FILE_NAME_FULL = "Datasets/" + IMPORT_BASH_FILE_NAME;

  CMD_ImportKddTrainData = """.separator ","
.import kddcup.data KDD_TRAIN_DATA
.import corrected TEST_CORRECTED
"""

  CMD_Exec_sqlite3_import = "sqlite3 ${DATABASE_NAME} < ${IMPORT_FILE_NAME}"

  FOLDER_DATASETS = file("Datasets")
  FOLDER_DATASETS_FULLPATH = FOLDER_DATASETS.getAbsolutePath()

  output_SQLITE_IMPORT_FILE = file(IMPORT_FILE_NAME_FULL)
  output_SQLITE_IMPORT_FILE_BASH_COMMAND = file(IMPORT_BASH_FILE_NAME_FULL)

}



task generateImportScripts << {
  FOLDER_DATASETS.mkdirs()
  output_SQLITE_IMPORT_FILE.write CMD_ImportKddTrainData
  output_SQLITE_IMPORT_FILE_BASH_COMMAND.write CMD_Exec_sqlite3_import


  ant.chmod(dir:FOLDER_DATASETS_FULLPATH, perm:'+x', includes:"*.bash")

}








task tableImportKddTrainDataFromCommandLine(type:Exec) {
  //store the output instead of printing to the console:

  workingDir FOLDER_DATASETS_FULLPATH

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
  return standardOutput.toString()
  }

  if (isWindows())
  {
    commandLine 'cmd', '/c', CMD_Exec_sqlite3_import
  }
  else
  {
    commandLine "./" + IMPORT_BASH_FILE_NAME
  }

 }

tableImportKddTrainDataFromCommandLine.dependsOn execSQLCreateTables
tableImportKddTrainDataFromCommandLine.dependsOn execSQLCreateViews

tableImportKddTrainDataFromCommandLine.dependsOn execSQLInsertLookupTables




tableImportKddTrainDataFromCommandLine.dependsOn generateImportScripts
tableImportKddTrainDataFromCommandLine.dependsOn unzipSqlite3




configure(tableImportKddTrainDataFromCommandLine) {   
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'import KDD99 files to sqlite database'
}


task schemaChangeAfterImport(type:JavaExec) {
  main = mainPackageName + ".etl.TableSchemaUpdatesAfterImport"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'after import KDD99 files to sqlite database, execute ALTER TABLE sql scripts'

}



task CreateArffFilesForLearningCurve(type:JavaExec) {
  main = "testBench.ids.kdd99.dal.CreateArffFilesForLearningCurve"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "20g"
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'This is Arff files creation step from Database for Learning curves'
}


task CreateArffFileForFullTrainingAndTestDatasetGRunner(type:JavaExec) {
  main = "testBench.ids.kdd99.dal.CreateArffFileForFullTrainingAndTestDatasetGRunner"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "20g"
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'This is Arff files creation step from Database'
}

task createArffFileFromSqlScriptFile(type:JavaExec) {

  if (project.hasProperty('sqlFileName') )
  {
    def argList = ["sqlFileName",sqlFileName]
    args = argList
  }


  main = "testBench.ids.kdd99.dal.CreateArffFileFromSqlScriptFileGRunner"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "20g"
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = """This is Arff files creation step from Sql Script File
              usage: gradlew createArffFileFromSqlScriptFile -PsqlFileName=Kdd99TrainSubsetWithReplacement1000"""
}



task CreateSubsetDataWithoutReplacementKdd99TrainDataNoDup(type:JavaExec) {
  main = "testBench.ids.kdd99.dal.CreateSubsetDataWithoutReplacementKdd99TrainDataNoDup"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'This is Subset table without replacement creation step in the Database'
}

task CreateSubsetDataWithReplacementKdd99TrainDataNoDup(type:JavaExec) {
  main = "testBench.ids.kdd99.dal.CreateSubsetDataWithReplacementKdd99TrainDataNoDup"
  classpath = sourceSets.main.runtimeClasspath
  group = GROUP_NAME_KDD_DATA_PREPERATION
  description = 'This is Subset table without replacement creation step in the Database'
}
