ext {
  GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA = "KDD99 Machine Learning Training and Testing Using WEKA"
}




task trainOneModelUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TrainOneModelUsingWekaInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"

  
  if (project.hasProperty('classifierName') )
  {
    //print classifierName
    def argList = ["classifierName", classifierName ]

    if (project.hasProperty('classifierOptions') )
    {
       argList = argList + ["classifierOptions", classifierOptions]
    }

    args = argList
  }
  else if (project.hasProperty("classifierFullString"))
  {
    print classifierFullString
    def argList = ["classifierFullString",classifierFullString]
    args = argList

  }

  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Using Training dataset, named classifiers are trained. 
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierName=J48 
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierName=NaiveBayes -PclassifierOptions='-K'
  Usage Example1:  gradlew trainOneModelUsingWekaInTrainingDataSet -PclassifierFullString='weka.classifiers.rules.OneR -B 20'
  """
}

task trainAllModelsUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TrainAllModelsUsingWekaInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = 'Using Training dataset different classifiers are trained. '
}

task trainGroupModelsUsingWekaInTrainingDataSet(type:JavaExec) {
  if (project.hasProperty('classifierGroupName') )
  {
    def argList = ["classifierGroupName",classifierGroupName]
    args = argList
  }
  
  main = "testBench.ids.kdd99.weka.TrainGroupModelsUsingWekaInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Using Training dataset different classifiers are trained. 
    Usage Example1:  gradlew trainGroupModelsUsingWekaInTrainingDataSet -PclassifierGroupName=fast 
    Usage Example1:  gradlew trainGroupModelsUsingWekaInTrainingDataSet -PclassifierGroupName=slow 
    Usage Example1:  gradlew trainGroupModelsUsingWekaInTrainingDataSet -PclassifierGroupName=tree 
  """
}


task testOneModelUsingWekaInTrainingDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneR.weka"]
    args = argList
  }

  main = "testBench.ids.kdd99.weka.TestOneModelUsingWekaInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Test already trained model on KDD99 full training data set
  Usage Example1:  ./gradlew testOneModelUsingWekaInTrainingDataSet -PmodelFileName='weka.classifiers.rules.OneR.weka'
  """

  


}



task testAllModelsUsingWekaInTrainingDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TestAllModelsUsingWekaInTrainingDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Test already trained models on KDD99 full training data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}

task testAllModelsUsingWekaInTestDataSet(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TestAllModelsUsingWekaInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Test already trained models on KDD99 full test data set.
  Already trained models can be seen using listTrainedModelFiles task.
  """
}



task testOneModelUsingWekaInTestDataSet(type:JavaExec) {

  if (project.hasProperty('modelFileName') )
  {
    def argList = ["modelFileName",modelFileName]
    args = argList
    //print modelFileName

  }
  else
  {
    def argList = ["modelFileName","weka.classifiers.rules.OneR.weka"]
    args = argList

  }

  main = "testBench.ids.kdd99.weka.TestOneModelUsingWekaInTestDataSet"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"
  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Test already trained model on KDD99 full test data set
  Usage Example1:  ./gradlew testOneModelUsingWekaInTestDataSet -PmodelFileName='weka.classifiers.rules.OneR.weka'
  """

  


}


task listTrainedModelFilesWeka() << {
  FileTree tree = fileTree(dir: 'Datasets/SavedModels').include('**/weka*.weka')
  tree.each {File file ->
      println file.name
  }
}

listTrainedModelFilesWeka.group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
listTrainedModelFilesWeka.description = 'List trained model files, which can be used in other tasks such as testOneModelUsingWekaInTrainingDataSet'



task trainOneModelUsingWekaInGivenFolderTrainingDataSets(type:JavaExec) {
  main = "testBench.ids.kdd99.weka.TrainOneModelUsingWekaInGivenFolderTrainingDataSets"
  classpath = sourceSets.main.runtimeClasspath
  minHeapSize = "5g"
  maxHeapSize = "32g"

def argList = []
  
  if (project.hasProperty('classifierName') )
  {
    //print classifierName
    argList = ["classifierName", classifierName ]

    if (project.hasProperty('classifierOptions') )
    {
       argList = argList + ["classifierOptions", classifierOptions]
    }

    args = argList
  }
  else if (project.hasProperty("classifierFullString"))
  {
    print classifierFullString
    argList = ["classifierFullString",classifierFullString]
    args = argList

  }
  if(project.hasProperty("folderName"))
  {
    argList =  argList + ["folderName", folderName]
    args = argList

  }


  group = GROUP_NAME_KDD_ML_TRAIN_TEST_WEKA
  description = """Using Training datasets in a given Folder , named classifiers are trained. 
  Usage Example1:  gradlew trainOneModelUsingWekaInGivenFolderTrainingDataSets -PclassifierName=J48 -PfolderName='Datasets/SavedArff/LearningCurve'
  Usage Example1:  gradlew trainOneModelUsingWekaInGivenFolderTrainingDataSets -PclassifierName=NaiveBayes -PclassifierOptions='-K'
  Usage Example1:  gradlew trainOneModelUsingWekaInGivenFolderTrainingDataSets -PclassifierFullString='weka.classifiers.rules.OneR -B 20'
  """
}

